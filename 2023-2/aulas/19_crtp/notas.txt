           ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
            NOTAS DE AULA - 19 POO: POLIMORFISMO ESTÁTICO -
                                  CRTP

                           Luigi D. C. Soares
           ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


Motivação
═════════

  Suponha que desejamos definir uma interface para coleções que são
  /enumeráveis/ (não confundir com /enums/ em C++). Essa interface
  define operações como:


  • `map': aplica uma função a cada elemento da coleção e retorna uma
    nova coleção

  • `filter': aplica uma função a cada elemento da coleção e retorna uma
    nova coleção apenas com os elementos para os quais o resultado foi
    verdadeiro

  • `reduce': aplica uma função a cada elemento da coleção, acumulando
    um resultado (exemplo: somar os elementos)

  • …

  Vamos começar construindo nossa interface `Enum' (vamos assumir que
  coleções enumeráveis são homogêneas (todos os elementos são do mesmo
  tipo `T'):

  ┌────
  │ template <typename T>
  │ class Enum {
  │ public:
  │   // ...
  │ };
  └────

  A operação `map' aplica uma função a elementos do tipo `T' da coleção
  original e retorna novos elementos de um tipo `Q':

  ┌────
  │ template <typename T>
  │ class Enum {
  │ public:
  │   template <typename Q>
  │   Enum<Q> *map(std::function<Q (T)> fn);
  │ };
  └────

  Mas, o objetivo é que `Enum' seja uma interface. Assim, coleções podem
  implementar esta interface e, consequentemente, poderíamos aproveitar
  do polimorfismo de subtipagem (aquele polimorfismo dinâmico que
  vimos):

  ┌────
  │ template <typename T>
  │ class Enum {
  │ public:
  │   template <typename Q>
  │   virtual Enum<Q> *map(std::function<Q (T)> fn) = 0;
  │ 
  │   virtual ~Enum() = default;
  │ };
  └────

  Agora, vamos tentar definir uma coleção `Vector' que implemente a
  interface `Enum'

  ┌────
  │ template <typename T>
  │ class Vector : public Enum<T> {
  │ public:
  │   Vector(std::vector<T> const &v) : _container(v) {}
  │ 
  │   template <typename Q>
  │   Enum<Q> *map(std::function<Q (T)> fn) override {
  │     std::vector<Q> mapped;
  │     for (T e : _container) mapped.push_back(fn(e));
  │     return new Vector<Q>(mapped);
  │   }
  │ 
  │ private:
  │   std::vector<T> _container;
  │ };
  └────

  E vamos tentar utilizar o vetor:

  ┌────
  │ #include <functional>
  │ #include <vector>
  └────

  ┌────
  │ int main() {
  │   Enum<int> *xs = new Vector<int>({5, 4, 3, 2, 1, 0});
  │   xs->map<char>([](int e) { return e + 'A'; }); // Transforma em letras
  │   delete xs;
  │   return 0;
  │ }
  └────

  ┌────
  │ error: templates may not be ‘virtual’
  │ error: member template ‘Enum<Q>* Vector<T>::map(std::function<Q(T)>)’ may not have virt-specifiers
  └────

  Temos um problema: C++ não suporta a mistura de polimorfismo
  paramétrico (templates, em tempo de compilação) e polimorfismo de
  subtipagem (métodos virtuais, em tempo de execução)!


Curiously Recurring Template Pattern (CRTP)
═══════════════════════════════════════════

  • Será que conseguimos alcançar um efeito similar ao do uso de métodos
    virtuais utilizando templates?

  • Nosso objetivo é, a partir de uma indireção (ponteiro, referência) a
    uma instância de uma classe derivada de `Enum' (ou seja, através de
    um ponteiro/referência para `Enum'), utilizar os métodos
    implementados na classe derivada

  Será que conseguimos, a partir da classe base, delegar a chamada da
  função para um container específico? Algo como

  ┌────
  │ template <typename T>
  │ class Enum {
  │ public:
  │   template <typename Q>
  │   Enum<Q> *map(std::function<Q (T)> fn) {
  │     return converter_para_container(this)->map(fn);
  │   }
  │ 
  │   virtual ~Enum() = default;
  │ };
  └────

  Bom, o operador que implementa a ideia de `converter_para_container'
  existe:

  ┌────
  │ template <typename T>
  │ class Enum {
  │ public:
  │   template <typename Q>
  │   Enum<Q> *map(std::function<Q (T)> fn) {
  │     return static_cast<Container *>(this)->map(fn);
  │   }
  │ 
  │   virtual ~Enum() = default;
  │ };
  └────

  Mas, de onde podemos tirar a informação relacionada a classe
  `Container'? Um novo parâmetro de `Enum'!

  ┌────
  │ template <typename Container, typename T> // <<<
  │ class Enum {
  │ public:
  │   template <typename Q>
  │   Enum<Container, Q> *map(std::function<Q (T)> fn) { // <<<
  │     return static_cast<Container *>(this)->map(fn);
  │   }
  │ 
  │   virtual ~Enum() = default;
  │ };
  └────

  Mas, e agora, como passar a informação sobre o container adiante?

  ┌────
  │ template <typename T>
  │ class Vector : public Enum<Vector<T>, T> { // <<<
  │ public:
  │   Vector(std::vector<T> const &v) : _container(v) {}
  │ 
  │   template <typename Q>
  │   Enum<Vector<Q>, Q> *map(std::function<Q (T)> fn) { // <<<
  │     std::vector<Q> mapped;
  │     for (T e : _container) mapped.push_back(fn(e));
  │     return new Vector<Q>(mapped);
  │   }
  │ 
  │ private:
  │   std::vector<T> _container;
  │ };
  └────

  ┌────
  │ int main() {
  │   Enum<Vector<int>, int> *xs = new Vector<int>({5, 4, 3, 2, 1, 0});
  │   xs->map<char>([](int e) { return e + 'A'; }); // Transforma em letras
  │   delete xs;
  │   return 0;
  │ }
  └────

  ┌────
  │ error: cannot convert ‘Enum<Vector<char>, char>*’ to ‘Enum<Vector<int>, char>*’ in return
  └────

  Hmm, ainda não funcionou… por quê? De onde veio esse retorno
  `Enum<Vector<int>, char> *'?

  Vamos voltar para a definição da função `map' em `Enum':

  ┌────
  │ template <typename Q>
  │ Enum<Container, Q> *map(std::function<Q (T)> fn) { // <<<
  │   return static_cast<Container *>(this)->map(fn);
  │ }
  └────

  O nosso objetivo era, a partir de um vetor de inteiros, retornar um
  vetor de chars. Mas, quem é `Container' nesse template? De onde vem?

  ┌────
  │ Enum<Vector<int>, int> *xs = new Vector<int>({5, 4, 3, 2, 1, 0});
  └────

  `Container = Vector<int>', não `Vector<char>'…

  O que nós gostaríamos, na verdade, é que `Container' não fosse a
  classe concreta `Vector<tipo>', mas sim o template `Vector':

  ┌────
  │ template <template <typename> typename Container, typename T> // <<<
  │ class Enum {
  │ public:
  │   template <typename Q>
  │   Enum<Container, Q> *map(std::function<Q (T)> fn) {
  │     return static_cast<Container<T> *>(this)->map(fn); // <<<
  │   }
  │ 
  │   virtual ~Enum() = default;
  │ };
  └────

  ┌────
  │ template <typename T>
  │ class Vector : public Enum<Vector, T> { // <<<
  │ public:
  │   Vector(std::vector<T> const &v) : _container(v) {}
  │ 
  │   template <typename Q>
  │   Enum<Vector, Q> *map(std::function<Q (T)> fn) { // <<<
  │     std::vector<Q> mapped;
  │     for (T e : _container) mapped.push_back(fn(e));
  │     return new Vector<Q>(mapped);
  │   }
  │ 
  │ private:
  │   std::vector<T> _container;
  │ };
  └────

  ┌────
  │ int main() {
  │   Enum<Vector, int> *xs = new Vector<int>({5, 4, 3, 2, 1, 0});
  │   xs->map<char>([](int e) { return e + 'A'; }); // Transforma em letras
  │   delete xs;
  │   return 0;
  │ }
  └────

  Agora funciona!!! Vamos adicionar um segundo método `for_each' que vai
  servir para percorrer os elementos e aplicar uma função. Vamos usar
  esse método para imprimir os elementos das coleções.

  ┌────
  │ template <template <typename> typename Container, typename T> // <<<
  │ class Enum {
  │ public:
  │   template <typename Q>
  │   Enum<Container, Q> *map(std::function<Q (T)> fn) {
  │     return static_cast<Container<T> *>(this)->map(fn); // <<<
  │   }
  │ 
  │   void for_each(std::function<void (T)> fn) {
  │     static_cast<Container<T> *>(this)->for_each(fn);
  │   }
  │ 
  │   virtual ~Enum() = default;
  │ };
  └────

  ┌────
  │ template <typename T>
  │ class Vector : public Enum<Vector, T> { // <<<
  │ public:
  │   Vector(std::vector<T> const &v) : _container(v) {}
  │ 
  │   template <typename Q>
  │   Enum<Vector, Q> *map(std::function<Q (T)> fn) { // <<<
  │     std::vector<Q> mapped;
  │     for (T e : _container) mapped.push_back(fn(e));
  │     return new Vector<Q>(mapped);
  │   }
  │ 
  │   void for_each(std::function<void (T)> fn) {
  │     for (T e : _container) fn(e);
  │   }
  │ 
  │ private:
  │   std::vector<T> _container;
  │ };
  └────

  ┌────
  │ #include <iostream>
  │ #include <functional>
  │ #include <vector>
  └────

  ┌────
  │ void show(Enum<Vector, char> *xs) {
  │   xs->for_each([](char e) { std::cout << e << " "; });
  │   std::cout << std::endl;
  │ }
  │ 
  │ int main() {
  │   Enum<Vector, int> *xs =
  │     new Vector<int>({5, 4, 3, 2, 1, 0});
  │ 
  │   Enum<Vector, char> *xs_letter
  │     = xs->map<char>([](int e) { return e + 'A'; });
  │ 
  │   show(xs_letter);
  │ 
  │   delete xs;
  │   delete xs_letter;
  │ 
  │   return 0;
  │ }
  └────

  ┌────
  │ F E D C B A 
  └────


  Como implementar a função `show' de forma que possamos visualizar
  também o vetor de inteiros pré mapeamento?

  ┌────
  │ template <typename T>
  │ void show(Enum<Vector, T> *xs) {
  │   xs->for_each([](T e) { std::cout << e << " "; });
  │   std::cout << std::endl;
  │ }
  │ 
  │ int main() {
  │   Enum<Vector, int> *xs
  │     = new Vector<int>({5, 4, 3, 2, 1, 0});
  │ 
  │   Enum<Vector, char> *xs_letter
  │     = xs->map<char>([](int e) { return e + 'A'; });
  │ 
  │   show(xs);
  │   show(xs_letter);
  │ 
  │   delete xs;
  │   delete xs_letter;
  │ 
  │   return 0;
  │ }
  └────

  ┌────
  │ 5 4 3 2 1 0 
  │ F E D C B A 
  └────


  Agora, vamos implementar a mesma interface para um vetor ordenado:

  ┌────
  │ template <typename T>
  │ class SortedVector : public Enum<SortedVector, T> {
  │ public:
  │   SortedVector(std::vector<T> const &v) : _container(v) {
  │     std::sort(_container.begin(), _container.end());
  │   }
  │ 
  │   template <typename Q>
  │   Enum<SortedVector, Q> *map(std::function<Q (T)> fn) {
  │     std::vector<Q> mapped;
  │     for (T e : _container) mapped.push_back(fn(e));
  │     return new SortedVector<Q>(mapped);
  │   }
  │ 
  │   void for_each(std::function<void (T)> fn) {
  │     for (T e : _container) fn(e);
  │   }
  │ 
  │ private:
  │   std::vector<T> _container;
  │ };
  └────

  ┌────
  │ template <typename T>
  │ void show(Enum<Vector, T> *xs) {
  │   xs->for_each([](T e) { std::cout << e << " "; });
  │   std::cout << std::endl;
  │ }
  │ 
  │ int main() {
  │   Enum<Vector, int> *xs =
  │     new Vector<int>({5, 4, 3, 2, 1, 0});
  │ 
  │   Enum<Vector, char> *xs_letter
  │     = xs->map<char>([](int e) { return e + 'A'; });
  │ 
  │   show(xs);
  │   show(xs_letter);
  │ 
  │   delete xs;
  │   delete xs_letter;
  │ 
  │   Enum<SortedVector, int> *sorted_xs =
  │     new SortedVector<int>({5, 4, 3, 2, 1, 0});
  │ 
  │   Enum<SortedVector, char> *sorted_xs_letter
  │     = sorted_xs->map<char>([](int e) { return e + 'A'; });
  │ 
  │   show(sorted_xs);
  │   show(sorted_xs_letter);
  │ 
  │   delete sorted_xs;
  │   delete sorted_xs_letter;
  │ 
  │   return 0;
  │ }
  └────

  ┌────
  │ error: no matching function for call to ‘show(Enum<SortedVector, int>*&)’
  └────

  Hmm, o que aconteceu? Claro! A função `show' só aceita o enumerável
  `Vector'. Lembre-se que nosso objetivo é conseguir alcançar um efeito
  similar ao de métodos virtuais, então precisamos fazer com que `show'
  aceite um enuméravel qualquer:

  ┌────
  │ template <template <typename> typename Container, typename T>
  │ void show(Enum<Container, T> *xs) {
  │   xs->for_each([](T e) { std::cout << e << " "; });
  │   std::cout << std::endl;
  │ }
  │ 
  │ int main() {
  │   Enum<Vector, int> *xs =
  │     new Vector<int>({5, 4, 3, 2, 1, 0});
  │ 
  │   Enum<Vector, char> *xs_letter
  │     = xs->map<char>([](int e) { return e + 'A'; });
  │ 
  │   show(xs);
  │   show(xs_letter);
  │ 
  │   delete xs;
  │   delete xs_letter;
  │ 
  │   Enum<SortedVector, int> *sorted_xs =
  │     new SortedVector<int>({5, 4, 3, 2, 1, 0});
  │ 
  │   Enum<SortedVector, char> *sorted_xs_letter
  │     = sorted_xs->map<char>([](int e) { return e + 'A'; });
  │ 
  │   show(sorted_xs);
  │   show(sorted_xs_letter);
  │ 
  │   delete sorted_xs;
  │   delete sorted_xs_letter;
  │ 
  │   return 0;
  │ }
  └────

  ┌────
  │ 5 4 3 2 1 0 
  │ F E D C B A 
  │ 0 1 2 3 4 5 
  │ A B C D E F 
  └────


  Vamos tentar extrair o mapeamento para uma função polimórfica também:

  ┌────
  │ template <template <typename> typename Container>
  │ Enum<Container, char> *as_letter(Enum<Container, int> *xs) {
  │   return xs->map<char>([](int e) { return e + 'A'; });
  │ }
  │ 
  │ template <template <typename> typename Container, typename T>
  │ void show(Enum<Container, T> *xs) {
  │   xs->for_each([](T e) { std::cout << e << " "; });
  │   std::cout << std::endl;
  │ }
  │ 
  │ int main() {
  │   Enum<Vector, int> *xs =
  │     new Vector<int>({5, 4, 3, 2, 1, 0});
  │ 
  │   Enum<Vector, char> *xs_letter
  │     = as_letter(xs);
  │ 
  │   show(xs);
  │   show(xs_letter);
  │ 
  │   delete xs;
  │   delete xs_letter;
  │ 
  │   Enum<SortedVector, int> *sorted_xs =
  │     new SortedVector<int>({5, 4, 3, 2, 1, 0});
  │ 
  │   Enum<SortedVector, char> *sorted_xs_letter
  │     = as_letter(sorted_xs);
  │ 
  │   show(sorted_xs);
  │   show(sorted_xs_letter);
  │ 
  │   delete sorted_xs;
  │   delete sorted_xs_letter;
  │ 
  │   return 0;
  │ }
  └────

  ┌────
  │ warning: expected ‘template’ keyword before dependent template name
  │ error: expected primary-expression before ‘char’
  └────

  Oops, algo estranho aconteceu: o compilador não conseguiu identificar
  se, na expressão `xs->map<char>(...)', o símbolo "<" se refere o
  operador de comparação ou ao início de uma lista de parâmetros (isso
  só acontece porque `xs' também é parametrizado por um tipo; quando a
  chamada de `map' estava diretamente na `main', o compilador conseguia
  identificar o significado de "<"). Para resolver, devemos informar
  explicitamente que `map' se trata de um template:

  ┌────
  │ template <template <typename> typename Container>
  │ Enum<Container, char> *as_letter(Enum<Container, int> *xs) {
  │   return xs->template map<char>([](int e) { return e + 'A'; }); // <<<
  │ }
  │ 
  │ template <template <typename> typename Container, typename T>
  │ void show(Enum<Container, T> *xs) {
  │   xs->for_each([](T e) { std::cout << e << " "; });
  │   std::cout << std::endl;
  │ }
  │ 
  │ int main() {
  │   Enum<Vector, int> *xs =
  │     new Vector<int>({5, 4, 3, 2, 1, 0});
  │ 
  │   Enum<Vector, char> *xs_letter
  │     = as_letter(xs);
  │ 
  │   show(xs);
  │   show(xs_letter);
  │ 
  │   delete xs;
  │   delete xs_letter;
  │ 
  │   Enum<SortedVector, int> *sorted_xs =
  │     new SortedVector<int>({5, 4, 3, 2, 1, 0});
  │ 
  │   Enum<SortedVector, char> *sorted_xs_letter
  │     = as_letter(sorted_xs);
  │ 
  │   show(sorted_xs);
  │   show(sorted_xs_letter);
  │ 
  │   delete sorted_xs;
  │   delete sorted_xs_letter;
  │ 
  │   return 0;
  │ }
  └────

  ┌────
  │ 5 4 3 2 1 0 
  │ F E D C B A 
  │ 0 1 2 3 4 5 
  │ A B C D E F 
  └────


Adicionando Funcionalidades Comuns
──────────────────────────────────

  Podemos utilizar a classe base do CRTP para adicionar funcionalidades
  em comum as subclasses. Por exemplo, podemos definir uma operação
  `with_index' que constrói um enumerável de elementos do tipo `T'
  associados ao seu índice. Isto não precisa ser implementado
  repetidamente em cada subclasse, visto que a implementação é comum a
  todas: basta implementar utilizando a operação `map' (na verdade, até
  a operação `map' pode ser implementada a partir de outra operação,
  chamada `reduce'; a grande maioria das operações podem ser
  implementadas utilizando-se `reduce'):

  ┌────
  │ template <template <typename> typename Container, typename T> // <<<
  │ class Enum {
  │ public:
  │   template <typename Q>
  │   Enum<Container, Q> *map(std::function<Q (T)> fn) {
  │     return static_cast<Container<T> *>(this)->map(fn); // <<<
  │   }
  │ 
  │   void for_each(std::function<void (T)> fn) {
  │     static_cast<Container<T> *>(this)->for_each(fn);
  │   }
  │ 
  │   Enum<Container, std::pair<T, unsigned>> *with_index() {
  │     unsigned index = 0;
  │     return map<std::pair<T, unsigned>>([&index](T e) {
  │       std::pair<T, unsigned> p = {e, index};
  │       index++;
  │       return p;
  │     });
  │   }
  │ 
  │   virtual ~Enum() = default;
  │ };
  └────

  Vamos adicionar uma função `show' para pares:

  ┌────
  │ #include <iostream>
  │ #include <vector>
  │ #include <functional>
  │ #include <utility>
  └────

  ┌────
  │ template <template <typename> typename Container>
  │ Enum<Container, char> *as_letter(Enum<Container, int> *xs) {
  │   return xs->template map<char>([](int e) { return e + 'A'; });
  │ }
  │ 
  │ template <template <typename> typename Container, typename T>
  │ void show(Enum<Container, T> *xs) {
  │   xs->for_each([](T e) { std::cout << e << " "; });
  │   std::cout << std::endl;
  │ }
  │ 
  │ template <template <typename> typename Container, typename T>
  │ void show(Enum<Container, std::pair<T, unsigned>> *xs) { // <<<
  │   xs->for_each([](std::pair<T, unsigned> e) {
  │     std::cout << "(" << e.first << ", " << e.second << ") ";
  │   });
  │   std::cout << std::endl;
  │ }
  │ 
  │ int main() {
  │   Enum<Vector, int> *xs =
  │     new Vector<int>({5, 4, 3, 2, 1, 0});
  │ 
  │   Enum<Vector, char> *xs_letter
  │     = as_letter(xs);
  │ 
  │   Enum<Vector, std::pair<char, unsigned>> *xs_index
  │     = xs_letter->with_index();
  │ 
  │   show(xs);
  │   show(xs_letter);
  │   show(xs_index);
  │ 
  │   delete xs;
  │   delete xs_letter;
  │   delete xs_index;
  │ 
  │   Enum<SortedVector, int> *sorted_xs =
  │     new SortedVector<int>({5, 4, 3, 2, 1, 0});
  │ 
  │   Enum<SortedVector, char> *sorted_xs_letter
  │     = as_letter(sorted_xs);
  │ 
  │   Enum<SortedVector, std::pair<char, unsigned>> *sorted_xs_index
  │     = sorted_xs_letter->with_index();
  │ 
  │   show(sorted_xs);
  │   show(sorted_xs_letter);
  │   show(sorted_xs_index);
  │ 
  │   delete sorted_xs;
  │   delete sorted_xs_letter;
  │   delete sorted_xs_index;
  │ 
  │   return 0;
  │ }
  └────

  ┌────
  │ 5 4 3 2 1 0 
  │ F E D C B A 
  │ (F, 0) (E, 1) (D, 2) (C, 3) (B, 4) (A, 5) 
  │ 0 1 2 3 4 5 
  │ A B C D E F 
  │ (A, 0) (B, 1) (C, 2) (D, 3) (E, 4) (F, 5) 
  └────
